{"version":3,"file":"vrMenuTestScene.js","sources":["../src/xr/VRMenu.js","../src/kit/sharedModules/vrMenuTestScene.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport { ControllersManager, EventTypes as CMEventTypes } from './ControllersManager.js';\r\nimport * as BufferGeometryUtils from 'three/addons/utils/BufferGeometryUtils.js';\r\nimport { InteractiveVRObject } from './InteractiveVRObject.js';\r\nimport { VrInteractivePanel } from './VrInteractivePanel.js';\r\n\r\nexport const defaultOptions = {\r\n\tmode: 'panel', // \"swatch\", \"panel\",\r\n\tdebugLevel: 1,\r\n\tpanel: {\r\n\t\twidth: 1, // meters\r\n\t\tinclination: 30, // degrees\r\n\t\tdistance: 1.25, // meters\r\n\t\tverticalOffset: -0.5, // meters\r\n\t},\r\n};\r\n\r\nexport class VrMenu extends VrInteractivePanel {\r\n\t_vrUI;\r\n\r\n\tconstructor(worldContainer, controllersManager, options) {\r\n\t\tsuper(worldContainer, controllersManager, options);\r\n\r\n\t\tif (this.options.mode == 'swatch') {\r\n\t\t\t//this._container.position.set(0, 0.1, -0.2);\r\n\r\n\t\t\t//\t-z goes forward in the controller's hand direction\r\n\t\t\t//\t+y goes above the controller\r\n\r\n\t\t\tthis._container.position.set(-0.03, 0.1, -0.14);\r\n\t\t\tthis._container.scale.set(0.35, 0.35, 0.35);\r\n\t\t\tthis._container.rotation.order = 'YXZ';\r\n\t\t\tthis._container.rotation.y = THREE.MathUtils.degToRad(90);\r\n\t\t\tthis._container.rotation.x = THREE.MathUtils.degToRad(-10);\r\n\t\t\tthis._container.rotation.z = THREE.MathUtils.degToRad(-45);\r\n\t\t} else {\r\n\t\t\tthis._container.position.set(0, 0.5, -1);\r\n\t\t\tthis._container.scale.set(1, 1, 1);\r\n\t\t}\r\n\t\tthis._container.visible = false; // initially hidden\r\n\t\tthis._setupEventListeners();\r\n\t}\r\n\r\n\t// We override this method to add repositioning of the panel\r\n\tsetVisible(visible) {\r\n\t\tthis._container.visible = visible;\r\n\t\tif (visible && this.options.mode == 'panel') this._repositionPanel();\r\n\t}\r\n\r\n\t_updateAspectRatio(canvasWidthPx, canvasHeightPx, uiHeightPx) {\r\n\t\t0;\r\n\t\tconst aspect = canvasWidthPx / uiHeightPx;\r\n\r\n\t\t// map 0 .. uiHeightPx to 0 .. 1, to cover the whole mesh with the UI pixels only\r\n\t\tconst yScale = uiHeightPx / canvasHeightPx; // map scaling factor\r\n\t\t// We center the map in the canvas, vertically\r\n\t\tconst yOffset = 1 - yScale;\r\n\r\n\t\t//console.log(ui.zone.h, ui.maxHeight, h, ui.zone.y, ui.forceHeight);\r\n\r\n\t\t// extend the area covered by the UI, to cover the whole canvas\r\n\t\tthis._map.offset.set(0, yOffset);\r\n\t\tthis._map.repeat.set(1, yScale);\r\n\r\n\t\tthis._mesh.scale.y = 1 / aspect;\r\n\t\tthis._mesh.position.y = this._mesh.scale.y / 2;\r\n\t\t/*\r\n\t\tif (this.options.debugLevel > 0) {\r\n\t\t\tconsole.log('_updateUiAspectRatio()');\r\n\t\t\tconsole.log('canvas w,h:', canvasWidthPx, canvasHeightPx);\r\n\t\t\tconsole.log('uiHeightPx:', uiHeightPx);\r\n\t\t\tconsole.log('yOffset:', yOffset);\r\n\t\t\tconsole.log('yScale:', yScale);\r\n\t\t\tconsole.log('aspect:', aspect);\r\n\t\t}*/\r\n\r\n\t\tthis._mapYOffset = yOffset;\r\n\t\tthis._mapYScale = yScale;\r\n\t}\r\n\r\n\t_repositionPanel() {\r\n\t\t// position and viewDirection are defined in world coordinates\r\n\t\tconst { position, viewDirection } = this._controllersManager.getHeadsetTransform();\r\n\r\n\t\tviewDirection.y = 0; // we want to project direction on XZ plane\r\n\t\tviewDirection.normalize();\r\n\t\tviewDirection.multiplyScalar(this.options.panel.distance);\r\n\r\n\t\tposition.y += this.options.panel.verticalOffset;\r\n\t\tposition.add(viewDirection);\r\n\r\n\t\tthis._container.position.copy(position);\r\n\r\n\t\tthis._container.rotation.order = 'ZYX';\r\n\t\tthis._container.rotation.y = -Math.atan2(viewDirection.z, viewDirection.x) - Math.PI / 2;\r\n\t\tthis._container.rotation.x = -THREE.MathUtils.degToRad(this.options.panel.inclination);\r\n\t}\r\n\t/*\r\n\t// Ray event handlers required by InteractiveVRObject\r\n\r\n\tonRayStarted(intersection) {\r\n\t\tthis._onPointerEvent(this._createPointerEvent('pointerdown', intersection));\r\n\t}\r\n\r\n\tonRayUpdated(intersection) {\r\n\t\tthis._onPointerEvent(this._createPointerEvent('pointermove', intersection));\r\n\t}\r\n\r\n\tonRayEnded(intersection) {\r\n\t\tif (intersection) {\r\n\t\t\tthis._onPointerEvent(this._createPointerEvent('pointerup', intersection));\r\n\t\t} else {\r\n\t\t\tthis._onPointerEvent(this._createPointerEvent('pointerupoutside'));\r\n\t\t}\r\n\t}*/\r\n\r\n\t// event handlers\r\n\r\n\t_setupEventListeners() {\r\n\t\tthis._controllersManager.addEventListener(\r\n\t\t\tCMEventTypes.ON_LEFT_CONTROLLER_CONNECTED,\r\n\t\t\tthis._onLeftControllerConnected.bind(this)\r\n\t\t);\r\n\r\n\t\tthis._controllersManager.addEventListener(\r\n\t\t\tCMEventTypes.ON_LEFT_CONTROLLER_DISCONNECTED,\r\n\t\t\tthis._onLeftControllerDisconnected.bind(this)\r\n\t\t);\r\n\t}\r\n\r\n\t_onLeftControllerConnected(e) {\r\n\t\tif (this.options.mode == 'swatch') {\r\n\t\t\tlet grip = this._controllersManager?.left?.getGrip();\r\n\t\t\tif (grip) {\r\n\t\t\t\tgrip.add(this._container);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// panel mode\r\n\t\t\tthis._worldContainer.add(this._container);\r\n\t\t}\r\n\t}\r\n\r\n\t_onLeftControllerDisconnected(e) {\r\n\t\tlet marker = e.handedness == 'left' ? this._leftHitMarker : this._rightHitMarker;\r\n\t\tmarker.visible = false;\r\n\r\n\t\tif (this._lastRayStartedHand == e.handedness) {\r\n\t\t\tthis._onPointerEvent(this._createPointerEvent('pointerupoutside'));\r\n\r\n\t\t\tthis._lastRayStartedHand = null;\r\n\t\t}\r\n\t\tif (this.options.mode == 'swatch') {\r\n\t\t\tlet grip = this._controllersManager?.left?.getGrip();\r\n\t\t\tif (grip) {\r\n\t\t\t\tgrip.remove(this._container);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// panel mode\r\n\t\t\tthis._worldContainer.remove(this._container);\r\n\t\t}\r\n\t}\r\n\r\n\tget ui() {\r\n\t\tthrow Error('Should be implemented in a subclass');\r\n\t}\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport const createVRMenuTestScene = (scene) => {\r\n\t// Add some lights\r\n\tlet light = new THREE.DirectionalLight(0xffffff, 0.3);\r\n\tlight.position.set(1, 1, 1).normalize();\r\n\tscene.add(light);\r\n\r\n\tscene.add(new THREE.AmbientLight(0xffffff, 0.2));\r\n\r\n\t// wireframe sphere background\r\n\tlet geometry = new THREE.SphereGeometry(50, 32, 16);\r\n\tlet material = new THREE.MeshBasicMaterial({\r\n\t\tcolor: 0xffffff,\r\n\t\twireframe: true,\r\n\t\topacity: 0.5,\r\n\t\ttransparent: true,\r\n\t});\r\n\tconst sphere = new THREE.Mesh(geometry, material);\r\n\tscene.add(sphere);\r\n\r\n\tlet floor = new THREE.Mesh(\r\n\t\tnew THREE.PlaneGeometry(300, 300, 20, 20).rotateX(-Math.PI / 2),\r\n\t\tnew THREE.MeshPhongMaterial({\r\n\t\t\tcolor: 0x808080,\r\n\t\t})\r\n\t);\r\n\tscene.add(floor);\r\n\r\n\tconst axesHelper = new THREE.AxesHelper(1);\r\n\tscene.add(axesHelper);\r\n\r\n\t// grid\r\n\tconst grid = new THREE.GridHelper(10, 10, 0x0000ff, 0x808080);\r\n\tgrid.material.opacity = 0.5;\r\n\tgrid.material.transparent = true;\r\n\tscene.add(grid);\r\n\r\n\tlet baseColumn = new THREE.Mesh(\r\n\t\tnew THREE.CylinderGeometry(0.3, 0.3, 0.5, 16),\r\n\t\tnew THREE.MeshPhongMaterial({ color: 0xccccccc })\r\n\t);\r\n\tbaseColumn.position.set(-1, 0.25, -3);\r\n\tscene.add(baseColumn);\r\n\r\n\tlet torusKnot = new THREE.Mesh(\r\n\t\tnew THREE.TorusKnotGeometry(0.2, 0.05, 100, 16),\r\n\t\tnew THREE.MeshPhongMaterial({ color: 0xff9900 })\r\n\t);\r\n\ttorusKnot.position.set(0, 2, 0);\r\n\r\n\tlet baseColumn2 = baseColumn.clone();\r\n\tbaseColumn2.position.set(1, 0.25, -3);\r\n\tscene.add(baseColumn2);\r\n\r\n\t// create a red cube of 1x1x1\r\n\tgeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\r\n\tmaterial = new THREE.MeshPhongMaterial({ color: 0xff0000, shininess: 32 });\r\n\tconst cube = new THREE.Mesh(geometry, material);\r\n\tcube.position.set(0, 2, 0);\r\n\tcube.rotateX(Math.PI / 4);\r\n\tcube.rotateZ(Math.PI / 3);\r\n\tscene.add(cube);\r\n\r\n\tbaseColumn.add(torusKnot);\r\n\tbaseColumn2.add(cube);\r\n\r\n\t// create a pointlight with a pointlight helper\r\n\tconst pointLight = new THREE.PointLight(0xffffff, 2);\r\n\tpointLight.position.set(0, 1, -2);\r\n\tscene.add(pointLight);\r\n\tconst pointLightHelper = new THREE.PointLightHelper(pointLight, 0.1);\r\n\tscene.add(pointLightHelper);\r\n\r\n\treturn {\r\n\t\ttorus: torusKnot,\r\n\t\tcube: cube,\r\n\t\tpointLight: pointLight,\r\n\t\tfloor: floor,\r\n\t};\r\n};\r\n"],"names":["VrMenu","VrInteractivePanel","worldContainer","controllersManager","options","__publicField","THREE.MathUtils","visible","canvasWidthPx","canvasHeightPx","uiHeightPx","aspect","yScale","yOffset","position","viewDirection","CMEventTypes","e","grip","_b","_a","marker","createVRMenuTestScene","scene","light","THREE.DirectionalLight","THREE.AmbientLight","geometry","THREE.SphereGeometry","material","THREE.MeshBasicMaterial","sphere","THREE.Mesh","floor","THREE.PlaneGeometry","THREE.MeshPhongMaterial","axesHelper","THREE.AxesHelper","grid","THREE.GridHelper","baseColumn","THREE.CylinderGeometry","torusKnot","THREE.TorusKnotGeometry","baseColumn2","THREE.BoxGeometry","cube","pointLight","THREE.PointLight","pointLightHelper","THREE.PointLightHelper"],"mappings":"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"}