{"version":3,"file":"helloVRExample.js","sources":["../src/kit/helloVrExample.js"],"sourcesContent":["/*\r\n\tThis example sets up a basic VR scene using THREE.js.\r\n\tIt includes a rotating red cube, a wireframe sphere background, and a grid. \r\n\tThe scene can be viewed in VR or on a regular screen. \r\n\tOrbitControls are added for user interaction with the camera.\r\n\t A button is provided to enter and exit VR mode.\r\n*/\r\n\r\n// Import three\r\nimport * as THREE from 'three';\r\n\r\n// Import the default VRButton\r\nimport { VRButton } from 'three/addons/webxr/VRButton.js';\r\n\r\n// Import OrbitControls\r\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n\r\nlet renderer;\r\nlet scene;\r\nlet camera;\r\nlet cube, cube2;\r\nlet controls;\r\n\r\nfunction setupThreejs() {\r\n\t// Make a renderer that fills the screen\r\n\trenderer = new THREE.WebGLRenderer({ antialias: true });\r\n\trenderer.setPixelRatio(window.devicePixelRatio);\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n\trenderer.xr.enabled = true;\r\n\r\n\t// Make a new scene\r\n\tscene = new THREE.Scene();\r\n\r\n\t// Make a camera. note that far is set to 100, which is better for realworld sized environments\r\n\tcamera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);\r\n\tcamera.position.set(0, 2, 5);\r\n\tscene.add(camera);\r\n\r\n\t// Add canvas to the page\r\n\tdocument.body.appendChild(renderer.domElement);\r\n\r\n\t// Add a button to enter/exit vr to the page\r\n\tdocument.body.appendChild(VRButton.createButton(renderer));\r\n\r\n\t// Initialize OrbitControls\r\n\tcontrols = new OrbitControls(camera, renderer.domElement);\r\n\tcontrols.target.set(0, 1.6, 0);\r\n\tcontrols.update();\r\n\r\n\t// Handle browser resize\r\n\twindow.addEventListener('resize', onWindowResize, false);\r\n}\r\n\r\nfunction onWindowResize() {\r\n\tcamera.aspect = window.innerWidth / window.innerHeight;\r\n\tcamera.updateProjectionMatrix();\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n}\r\n\r\nfunction buildScene() {\r\n\t// Add some lights\r\n\tvar light = new THREE.DirectionalLight(0xffffff, 0.5);\r\n\tlight.position.set(1, 1, 1).normalize();\r\n\tscene.add(light);\r\n\tscene.add(new THREE.AmbientLight(0xffffff, 0.5));\r\n\r\n\t// Make a red cube\r\n\r\n\tcube = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), new THREE.MeshLambertMaterial({ color: 'red' }));\r\n\tcube.position.set(0, 1.5, -3);\r\n\tscene.add(cube);\r\n\r\n\t// wireframe sphere background\r\n\r\n\tconst geometry = new THREE.CylinderGeometry(10, 10, 4, 32, 1, true);\r\n\tgeometry.translate(0, 2, 0);\r\n\tconst material = new THREE.MeshBasicMaterial({\r\n\t\tcolor: 0xffff00,\r\n\t\twireframe: true,\r\n\t});\r\n\tconst sphere = new THREE.Mesh(geometry, material);\r\n\tscene.add(sphere);\r\n\r\n\t// 20x20 units grid, each cell is 1x1 unit\r\n\tconst floorGrid = new THREE.GridHelper(20, 20);\r\n\tscene.add(floorGrid);\r\n\r\n\tconst plane = new THREE.Mesh(\r\n\t\tnew THREE.PlaneGeometry(20, 20),\r\n\t\tnew THREE.MeshBasicMaterial({ color: 0x999999, visible: true, opacity: 0.5, transparent: true })\r\n\t);\r\n\tplane.rotateX(-Math.PI / 2);\r\n\tscene.add(plane);\r\n\r\n\t// axis helper\r\n\tconst axesHelper = new THREE.AxesHelper(1);\r\n\tscene.add(axesHelper);\r\n\r\n\t// Set animation loop\r\n\trenderer.setAnimationLoop(render);\r\n}\r\n\r\nfunction render(time) {\r\n\t// Rotate the cube\r\n\tcube.rotation.y = time / 1000;\r\n\r\n\t// Update controls\r\n\tcontrols.update();\r\n\r\n\t// Draw everything\r\n\trenderer.render(scene, camera);\r\n}\r\n\r\nsetupThreejs();\r\nbuildScene();\r\n"],"names":["renderer","scene","camera","cube","controls","setupThreejs","THREE.WebGLRenderer","THREE.Scene","THREE.PerspectiveCamera","VRButton","OrbitControls","onWindowResize","buildScene","light","THREE.DirectionalLight","THREE.AmbientLight","THREE.Mesh","THREE.BoxGeometry","THREE.MeshLambertMaterial","geometry","THREE.CylinderGeometry","material","THREE.MeshBasicMaterial","sphere","floorGrid","THREE.GridHelper","plane","THREE.PlaneGeometry","axesHelper","THREE.AxesHelper","render","time"],"mappings":"oIAiBA,IAAIA,EACAC,EACAC,EACAC,EACAC,EAEJ,SAASC,GAAe,CAEvBL,EAAW,IAAIM,EAAoB,CAAE,UAAW,EAAM,CAAA,EACtDN,EAAS,cAAc,OAAO,gBAAgB,EAC9CA,EAAS,QAAQ,OAAO,WAAY,OAAO,WAAW,EACtDA,EAAS,GAAG,QAAU,GAGtBC,EAAQ,IAAIM,EAGZL,EAAS,IAAIM,EAAwB,GAAI,OAAO,WAAa,OAAO,YAAa,GAAK,GAAG,EACzFN,EAAO,SAAS,IAAI,EAAG,EAAG,CAAC,EAC3BD,EAAM,IAAIC,CAAM,EAGhB,SAAS,KAAK,YAAYF,EAAS,UAAU,EAG7C,SAAS,KAAK,YAAYS,EAAS,aAAaT,CAAQ,CAAC,EAGzDI,EAAW,IAAIM,EAAcR,EAAQF,EAAS,UAAU,EACxDI,EAAS,OAAO,IAAI,EAAG,IAAK,CAAC,EAC7BA,EAAS,OAAM,EAGf,OAAO,iBAAiB,SAAUO,EAAgB,EAAK,CACxD,CAEA,SAASA,GAAiB,CACzBT,EAAO,OAAS,OAAO,WAAa,OAAO,YAC3CA,EAAO,uBAAsB,EAC7BF,EAAS,QAAQ,OAAO,WAAY,OAAO,WAAW,CACvD,CAEA,SAASY,GAAa,CAErB,IAAIC,EAAQ,IAAIC,EAAuB,SAAU,EAAG,EACpDD,EAAM,SAAS,IAAI,EAAG,EAAG,CAAC,EAAE,YAC5BZ,EAAM,IAAIY,CAAK,EACfZ,EAAM,IAAI,IAAIc,EAAmB,SAAU,EAAG,CAAC,EAI/CZ,EAAO,IAAIa,EAAW,IAAIC,EAAkB,EAAG,EAAG,CAAC,EAAG,IAAIC,EAA0B,CAAE,MAAO,KAAK,CAAE,CAAC,EACrGf,EAAK,SAAS,IAAI,EAAG,IAAK,EAAE,EAC5BF,EAAM,IAAIE,CAAI,EAId,MAAMgB,EAAW,IAAIC,EAAuB,GAAI,GAAI,EAAG,GAAI,EAAG,EAAI,EAClED,EAAS,UAAU,EAAG,EAAG,CAAC,EAC1B,MAAME,EAAW,IAAIC,EAAwB,CAC5C,MAAO,SACP,UAAW,EACb,CAAE,EACKC,EAAS,IAAIP,EAAWG,EAAUE,CAAQ,EAChDpB,EAAM,IAAIsB,CAAM,EAGhB,MAAMC,EAAY,IAAIC,EAAiB,GAAI,EAAE,EAC7CxB,EAAM,IAAIuB,CAAS,EAEnB,MAAME,EAAQ,IAAIV,EACjB,IAAIW,EAAoB,GAAI,EAAE,EAC9B,IAAIL,EAAwB,CAAE,MAAO,SAAU,QAAS,GAAM,QAAS,GAAK,YAAa,GAAM,CACjG,EACCI,EAAM,QAAQ,CAAC,KAAK,GAAK,CAAC,EAC1BzB,EAAM,IAAIyB,CAAK,EAGf,MAAME,EAAa,IAAIC,EAAiB,CAAC,EACzC5B,EAAM,IAAI2B,CAAU,EAGpB5B,EAAS,iBAAiB8B,CAAM,CACjC,CAEA,SAASA,EAAOC,EAAM,CAErB5B,EAAK,SAAS,EAAI4B,EAAO,IAGzB3B,EAAS,OAAM,EAGfJ,EAAS,OAAOC,EAAOC,CAAM,CAC9B,CAEAG,IACAO,EAAY"}