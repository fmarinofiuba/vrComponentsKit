{"version":3,"file":"navigationExample.js","sources":["../src/kit/navigationExample.js"],"sourcesContent":["/*\r\n\r\nThis document explains the portion of the WebXR APIs for managing input across the range of XR hardware\r\nhttps://immersive-web.github.io/webxr/input-explainer\r\n\r\n*/\r\n\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\nimport * as BufferGeometryUtils from 'three/addons/utils/BufferGeometryUtils.js';\r\n\r\nimport { VRButton } from 'three/addons/webxr/VRButton.js';\r\nimport { ControllersManager, EventTypes as CMEventTypes } from '../xr/ControllersManager.js';\r\nimport { XRTeleportMoveControl } from '../xr/XRTeleportMoveControl.js';\r\n\r\nimport * as UIL from '../vendor/uil.custom.module.js';\r\n\r\nimport { getHelixStaircase } from '../utils/helixStaircase.js';\r\nimport { getSquareStaircase } from '../utils/squareStaircase.js';\r\n\r\nlet renderer;\r\nlet scene;\r\nlet camera;\r\n\r\nlet clock = new THREE.Clock();\r\nlet floor;\r\nlet cyl;\r\n\r\nlet controllersManager;\r\nlet xrTeleportMoveControl;\r\nlet staircase;\r\n\r\nfunction setupThreejs() {\r\n\t// Make a renderer that fills the screen\r\n\trenderer = new THREE.WebGLRenderer({ antialias: true });\r\n\trenderer.setPixelRatio(window.devicePixelRatio);\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n\trenderer.xr.addEventListener('sessionstart', function (event) {\r\n\t\t//baseReferenceSpace = renderer.xr.getReferenceSpace();\r\n\t});\r\n\r\n\trenderer.xr.addEventListener('sessionend', function (event) {});\r\n\trenderer.xr.enabled = true;\r\n\trenderer.setClearColor(0x000033, 1);\r\n\r\n\t// Add canvas to the page\r\n\tdocument.body.appendChild(renderer.domElement);\r\n\r\n\t// Add a button to enter/exit vr to the page\r\n\tdocument.body.appendChild(VRButton.createButton(renderer));\r\n\r\n\t// Make a new scene\r\n\tscene = new THREE.Scene();\r\n\r\n\t// Make a camera. note that far is set to 100, which is better for realworld sized environments\r\n\tcamera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 10000);\r\n\tcamera.position.set(-30, 30, 30);\r\n\tcamera.lookAt(0, 1.6, 0);\r\n\tscene.add(camera);\r\n\r\n\tconst controls = new OrbitControls(camera, renderer.domElement);\r\n\r\n\t// Add some lights\r\n\tvar light = new THREE.DirectionalLight(0xffffff, 3);\r\n\tlight.position.set(2, 1, 4).normalize();\r\n\tscene.add(light);\r\n\r\n\tlet ambientLight = new THREE.AmbientLight(0xffffff, 1);\r\n\tscene.add(ambientLight);\r\n\r\n\t// Handle browser resize\r\n\twindow.addEventListener('resize', onWindowResize, false);\r\n}\r\n\r\nfunction onWindowResize() {\r\n\tcamera.aspect = window.innerWidth / window.innerHeight;\r\n\tcamera.updateProjectionMatrix();\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n}\r\n\r\nfunction setupXR() {\r\n\t// https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace\r\n\trenderer.xr.setReferenceSpaceType('local-floor');\r\n\r\n\tcontrollersManager = new ControllersManager(renderer.xr, scene);\r\n\r\n\tcontrollersManager.addEventListener(CMEventTypes.ON_RAYCAST_STARTED, (event) => {\r\n\t\tconsole.log('ON_RAYCAST_STARTED', event);\r\n\t});\r\n\r\n\tcontrollersManager.addEventListener(CMEventTypes.ON_RAYCAST_UPDATED, (event) => {\r\n\t\tconsole.log('ON_RAYCAST_UPDATED', event);\r\n\t});\r\n\r\n\tcontrollersManager.addEventListener(CMEventTypes.ON_RAYCAST_ENDED, (event) => {\r\n\t\tconsole.log('ON_RAYCAST_ENDED', event);\r\n\t});\r\n\r\n\tcontrollersManager.addEventListener(CMEventTypes.ON_DOUBLE_SQUEEZE_STARTED, (event) => {\r\n\t\tconsole.log('ON_DOUBLE_SQUEEZE_STARTED', event);\r\n\t});\r\n\r\n\tcontrollersManager.addEventListener(CMEventTypes.ON_DOUBLE_SQUEEZE_ENDED, (event) => {\r\n\t\tconsole.log('ON_DOUBLE_SQUEEZE_ENDED', event);\r\n\t});\r\n\r\n\tcontrollersManager.addEventListener(CMEventTypes.ON_AXIS_RIGHT_CLICK, (event) => {\r\n\t\tconsole.log('ON_AXIS_RIGHT_CLICK', event);\r\n\t});\r\n\r\n\txrTeleportMoveControl = new XRTeleportMoveControl(renderer.xr, controllersManager, scene);\r\n\r\n\t// Obtener las geometrías de los objetos Mesh\r\n\tconst floorGeometry = floor.geometry.clone();\r\n\tconst staircaseGeometry = staircase.geometry.clone();\r\n\tconst boxGeometry = cyl.geometry.clone();\r\n\r\n\t// we need to update the matrix world of the objects to get the correct geometry\r\n\tfloor.updateMatrixWorld();\r\n\tstaircase.updateMatrixWorld();\r\n\tcyl.updateMatrixWorld();\r\n\r\n\t// Aplicar las matrices de transformación a las geometrías\r\n\tfloorGeometry.applyMatrix4(floor.matrixWorld);\r\n\tstaircaseGeometry.applyMatrix4(staircase.matrixWorld);\r\n\tboxGeometry.applyMatrix4(cyl.matrixWorld);\r\n\r\n\t// Fusionar las geometrías ya transformadas\r\n\tconst geo = BufferGeometryUtils.mergeGeometries([floorGeometry, staircaseGeometry, boxGeometry]);\r\n\r\n\txrTeleportMoveControl.setTeleportSurfaces(geo);\r\n}\r\n\r\nfunction buildScene() {\r\n\t// floor\r\n\tlet floorTexture = new THREE.TextureLoader().load('../maps/floorPlane.png');\r\n\r\n\tfloor = new THREE.Mesh(\r\n\t\tnew THREE.PlaneGeometry(300, 300, 20, 20).rotateX(-Math.PI / 2),\r\n\t\tnew THREE.MeshPhongMaterial({\r\n\t\t\tcolor: 0x808080,\r\n\t\t\ttransparent: false,\r\n\t\t\topacity: 0.95,\r\n\t\t\tmap: floorTexture,\r\n\t\t})\r\n\t);\r\n\tscene.add(floor);\r\n\r\n\t// cyl\r\n\r\n\tconst cylGeo = new THREE.CylinderGeometry(10, 10, 10, 32, 2, false, -Math.PI / 2, Math.PI);\r\n\tcylGeo.rotateX(-Math.PI / 2);\r\n\tcylGeo.translate(0, -2, 0);\r\n\tcylGeo.scale(1, 0.6, 1);\r\n\tcyl = new THREE.Mesh(cylGeo, new THREE.MeshPhongMaterial({ color: 0xff9900 }));\r\n\tcyl.position.set(23, 0, 23);\r\n\tscene.add(cyl);\r\n\r\n\t//buildDome();\r\n\tbuildColumns();\r\n\r\n\tstaircase = getSquareStaircase();\r\n\tstaircase.position.set(15, 0, -15);\r\n\t//staircase.rotateY(Math.PI / 2);\r\n\tscene.add(staircase);\r\n\r\n\tlet marker = new THREE.Mesh(\r\n\t\tnew THREE.CylinderGeometry(0, 0.2, 1, 32),\r\n\t\tnew THREE.MeshPhongMaterial({ color: 0xff0000 })\r\n\t);\r\n\r\n\tlet markerX = marker.clone();\r\n\tmarkerX.position.set(10, 0, 0);\r\n\tscene.add(markerX);\r\n\r\n\tlet markerZ = marker.clone();\r\n\tmarkerZ.material = markerX.material.clone();\r\n\tmarkerZ.material.color.set(0x0000ff);\r\n\tmarkerZ.position.set(0, 0, 10);\r\n\tscene.add(markerZ);\r\n}\r\n\r\nfunction buildDome() {\r\n\t// wireframe sphere background\r\n\tconst geometry = new THREE.SphereGeometry(50, 24, 12);\r\n\tconst material = new THREE.MeshBasicMaterial({\r\n\t\tcolor: 0xcccccc,\r\n\t\twireframe: true,\r\n\t});\r\n\tconst sphere = new THREE.Mesh(geometry, material);\r\n\tscene.add(sphere);\r\n}\r\n\r\nfunction buildColumns() {\r\n\tconst mat2 = new THREE.MeshPhongMaterial({ color: 0x999999 });\r\n\tconst geo2 = new THREE.CylinderGeometry(0.5, 1, 100, 32);\r\n\tgeo2.translate(0, 50, 0);\r\n\r\n\tlet ring = 0;\r\n\tconst angleSeparation = [20, 15, 10];\r\n\r\n\tfor (let r = 50; r <= 170; r = r + 40) {\r\n\t\tfor (let i = 0; i < 360; i = i + angleSeparation[ring]) {\r\n\t\t\tlet a = (i * Math.PI) / 180;\r\n\t\t\tconst cylinder = new THREE.Mesh(geo2, mat2);\r\n\t\t\tlet x = Math.cos(a) * r;\r\n\t\t\tlet z = Math.sin(a) * r;\r\n\t\t\tcylinder.position.set(x, 0, z);\r\n\t\t\tscene.add(cylinder);\r\n\t\t}\r\n\t\tring++;\r\n\t}\r\n}\r\n\r\nfunction animate() {\r\n\trenderer.setAnimationLoop(render);\r\n}\r\n\r\nfunction render(time) {\r\n\tconst delta = clock.getDelta();\r\n\r\n\tcontrollersManager.update(time, delta);\r\n\txrTeleportMoveControl.update(delta);\r\n\r\n\trenderer.render(scene, camera);\r\n}\r\n\r\nsetupThreejs();\r\nbuildScene();\r\nsetupXR();\r\nanimate();\r\n"],"names":["renderer","scene","camera","clock","THREE.Clock","floor","cyl","controllersManager","xrTeleportMoveControl","staircase","setupThreejs","THREE.WebGLRenderer","event","VRButton","THREE.Scene","THREE.PerspectiveCamera","OrbitControls","light","THREE.DirectionalLight","ambientLight","THREE.AmbientLight","onWindowResize","setupXR","ControllersManager","CMEventTypes","XRTeleportMoveControl","floorGeometry","staircaseGeometry","boxGeometry","geo","BufferGeometryUtils.mergeGeometries","buildScene","floorTexture","THREE.TextureLoader","THREE.Mesh","THREE.PlaneGeometry","THREE.MeshPhongMaterial","cylGeo","THREE.CylinderGeometry","buildColumns","getSquareStaircase","marker","markerX","markerZ","mat2","geo2","ring","angleSeparation","r","i","a","cylinder","x","z","animate","render","time","delta"],"mappings":"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"}