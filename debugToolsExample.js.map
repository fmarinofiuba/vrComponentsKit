{"version":3,"file":"debugToolsExample.js","sources":["../src/kit/debugToolsExample.js"],"sourcesContent":["/*\r\n\r\nThis document explains the portion of the WebXR APIs for managing input across the range of XR hardware\r\nhttps://immersive-web.github.io/webxr/input-explainer\r\n\r\n*/\r\n\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n\r\nimport { VRButton } from 'three/addons/webxr/VRButton.js';\r\nimport { ControllersManager, EventTypes as CMEventTypes } from '../xr/ControllersManager.js';\r\nimport { XRTeleportMoveControl } from '../xr/XRTeleportMoveControl.js';\r\nimport { HtmlVrMenu } from '../xr/HtmlVrMenu.js';\r\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js';\r\nimport { createVRBasicScene } from './sharedModules/vrBasicTestScene.js';\r\nimport { HTMLMesh } from 'three/addons/interactive/HTMLMesh.js';\r\nimport { VrConsole } from '../xr/VrConsole.js';\r\nimport { VrVarsWatcher } from '../xr/VrVarsWatcher.js';\r\nimport { TeapotGeometry } from 'three/addons/geometries/TeapotGeometry.js';\r\n\r\nlet renderer;\r\nlet scene;\r\nlet camera;\r\n\r\nlet clock = new THREE.Clock();\r\n\r\nlet controllersManager;\r\nlet xrTeleportMoveControl;\r\nlet sceneElements;\r\n\r\nlet vrMenu;\r\nlet vrConsole;\r\nlet vrVarsWatcher;\r\nlet teapot;\r\nlet params = {\r\n\tstate: 'initial',\r\n};\r\n\r\nconst states = ['initial', 'running', 'paused', 'stopped', 'finished'];\r\n\r\nfunction setupThreejs() {\r\n\t// Make a renderer that fills the screen\r\n\trenderer = new THREE.WebGLRenderer({ antialias: true });\r\n\trenderer.setPixelRatio(window.devicePixelRatio);\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n\trenderer.xr.addEventListener('sessionstart', function (event) {});\r\n\r\n\trenderer.xr.addEventListener('sessionend', function (event) {});\r\n\trenderer.xr.enabled = true;\r\n\r\n\t// Add canvas to the page\r\n\tdocument.body.appendChild(renderer.domElement);\r\n\r\n\t// Add a button to enter/exit vr to the page\r\n\tdocument.body.appendChild(VRButton.createButton(renderer));\r\n\r\n\t// Make a new scene\r\n\tscene = new THREE.Scene();\r\n\r\n\t// Make a camera. note that far is set to 100, which is better for realworld sized environments\r\n\tcamera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 10000);\r\n\tcamera.position.set(0, 3, 5);\r\n\r\n\tscene.add(camera);\r\n\r\n\tconst controls = new OrbitControls(camera, renderer.domElement);\r\n\tcontrols.target.set(0, 1, 0);\r\n\tcontrols.update();\r\n\r\n\t// Handle browser resize\r\n\twindow.addEventListener('resize', onWindowResize, false);\r\n}\r\n\r\nfunction setupXR() {\r\n\tcontrollersManager = new ControllersManager(renderer.xr, scene);\r\n\r\n\tcontrollersManager.addEventListener(CMEventTypes.ON_BUTTON_UP, (e) => {\r\n\t\t//console.log('Button up:', e.type, e, e.button);\r\n\t});\r\n\r\n\tcontrollersManager.addEventListener(CMEventTypes.ON_BUTTON_DOWN, (e) => {\r\n\t\t//console.log('Button down:', e.type, e.button);\r\n\t});\r\n\r\n\txrTeleportMoveControl = new XRTeleportMoveControl(renderer.xr, controllersManager, scene);\r\n}\r\n\r\nfunction onWindowResize() {\r\n\tcamera.aspect = window.innerWidth / window.innerHeight;\r\n\tcamera.updateProjectionMatrix();\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n}\r\n\r\nfunction buildScene() {\r\n\t// create teapot\r\n\tconst geometry = new TeapotGeometry(0.5);\r\n\tconst material = new THREE.MeshStandardMaterial({ color: 0x00ff00 });\r\n\tteapot = new THREE.Mesh(geometry, material);\r\n\tteapot.position.set(0, 1, -3);\r\n\tscene.add(teapot);\r\n\r\n\tsceneElements = createVRBasicScene(scene);\r\n\r\n\txrTeleportMoveControl.setTeleportSurfaces(sceneElements.floor.geometry);\r\n\r\n\tlet vrConsole = new VrConsole(document.body, scene, controllersManager, { debugLevel: 1, size: 4 });\r\n\t// Ejemplos de uso de console, ahora capturados por la consola personalizada\r\n\tconsole.log('Consola personalizada iniciada usando Clase ES6 y Módulo.');\r\n\tconsole.warn('Esto es una advertencia desde la clase ES6.');\r\n\tconsole.error('¡Esto es un error generado desde la clase!');\r\n\tconsole.info('Información relevante usando ES6.');\r\n\tconsole.debug('Mensaje de debug con módulo.');\r\n\tconsole.trace('Rastreo de pila desde el módulo ES6:');\r\n\r\n\t// Ejemplo de uso de estilos con %c\r\n\tconsole.log('%cHola Mundo %ccon estilos desde la clase!', 'color: green; font-size: 18px;', 'color: purple;');\r\n\r\n\t// Ejemplo con un objeto\r\n\tconsole.log({ objetoEjemploES6: { nombre: 'Ejemplo Clase ES6', valor: 456 } });\r\n\r\n\t// Más mensajes de prueba\r\n\tconsole.log('Mensaje adicional desde el script principal.');\r\n\tconsole.warn('Otra advertencia para verificar el módulo.');\r\n\tconsole.error('Un error más para probar la clase ES6.');\r\n\r\n\tfor (let i = 0; i < 30; i++) {\r\n\t\tconsole.log('Mensaje de prueba número:', i);\r\n\t}\r\n\r\n\tsetInterval(() => {\r\n\t\t// log current time\r\n\t\t//console.log('Current time:', new Date());\r\n\t}, 1000);\r\n\r\n\tvrConsole.createMap();\r\n\tlet vrConsoleMesh = vrConsole.mesh;\r\n\tvrConsoleMesh.position.set(4, 1, -3);\r\n\tvrConsoleMesh.rotation.y = -Math.PI / 4;\r\n\tscene.add(vrConsoleMesh);\r\n\r\n\t// VrVarsWatcher\r\n\tvrVarsWatcher = new VrVarsWatcher(scene, controllersManager, { size: 4 });\r\n\r\n\tlet watcherMesh = vrVarsWatcher.mesh;\r\n\r\n\twatcherMesh.position.set(-4, 1, -3);\r\n\twatcherMesh.rotation.y = Math.PI / 4;\r\n\r\n\tscene.add(watcherMesh);\r\n\r\n\t// Add some variables to watch\r\n\tconst pos = new THREE.Vector3(1, 2, 3);\r\n\tconst rot = new THREE.Vector3(9, 7, 8);\r\n\r\n\t// Add variables with different types\r\n\tconst ref1 = vrVarsWatcher.add('teapot pos', teapot.position);\r\n\tconst ref2 = vrVarsWatcher.add('teapot rot', teapot.rotation);\r\n\tconst ref3 = vrVarsWatcher.add('teapot scale', teapot.scale);\r\n\tconst ref5 = vrVarsWatcher.add('Distance', () => camera.position.distanceTo(teapot.position));\r\n\tconst ref6 = vrVarsWatcher.add('state', params.state);\r\n\r\n\tvrVarsWatcher.createMap();\r\n}\r\n\r\nfunction animate() {\r\n\trenderer.setAnimationLoop(render);\r\n}\r\n\r\nlet count = 0;\r\nfunction render(time) {\r\n\tconst delta = clock.getDelta();\r\n\r\n\tcontrollersManager.update(time, delta);\r\n\r\n\t//xrTeleportMoveControl.update(delta);\r\n\r\n\tteapot.rotation.y += 0.01;\r\n\tteapot.position.y = 2 + Math.sin(time / 1000);\r\n\trenderer.render(scene, camera);\r\n\tvrVarsWatcher.update(time, delta);\r\n\r\n\tif (count % (1 * 60) == 0) {\r\n\t\tparams.state = states[Math.floor(Math.random() * states.length)];\r\n\t}\r\n\tcount++;\r\n}\r\n\r\nsetupThreejs();\r\n\r\nsetupXR();\r\nbuildScene();\r\n\r\nanimate();\r\n"],"names":["renderer","scene","camera","clock","THREE.Clock","controllersManager","xrTeleportMoveControl","sceneElements","vrVarsWatcher","teapot","params","states","setupThreejs","THREE.WebGLRenderer","event","VRButton","THREE.Scene","THREE.PerspectiveCamera","controls","OrbitControls","onWindowResize","setupXR","ControllersManager","CMEventTypes","e","XRTeleportMoveControl","buildScene","geometry","TeapotGeometry","material","THREE.MeshStandardMaterial","THREE.Mesh","createVRBasicScene","vrConsole","VrConsole","i","vrConsoleMesh","VrVarsWatcher","watcherMesh","THREE.Vector3","animate","render","count","time","delta"],"mappings":"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"}