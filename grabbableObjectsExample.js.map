{"version":3,"file":"grabbableObjectsExample.js","sources":["../src/xr/GrabbableVrObject.js","../src/kit/grabbableObjectsExample.js"],"sourcesContent":["/**\r\n * GrabbableVrObject\r\n *\r\n * This class provides functionality to make objects grabbable in VR environments.\r\n * It supports both contact grabbing (when controller is close to the object) and\r\n * remote grabbing (ray-based interaction). The class handles controller interactions,\r\n * object attachment/detachment, and provides events for grab start/end actions.\r\n */\r\nimport * as THREE from 'three';\r\nimport { EventsDispatcher } from '../utils/EventsDispatcher.js';\r\nimport { ControllersManager, EventTypes as CMEvents } from './ControllersManager.js';\r\n\r\nexport const defaultOptions = {\r\n\tcontactGrabbing: {\r\n\t\tenabled: true,\r\n\t\tdistanceThreshold: 0.03,\r\n\t},\r\n\tremoteGrabbing: {\r\n\t\tenabled: true,\r\n\t},\r\n\tshowHelpers: true,\r\n};\r\n\r\nexport const EventTypes = {\r\n\tON_GRAB_START: 'onGrabStart',\r\n\tON_GRAB_END: 'onGrabEnd',\r\n};\r\n\r\nexport class GrabbableVrObject extends EventsDispatcher {\r\n\t_options;\r\n\t_controllersManager;\r\n\r\n\t_targetObject;\r\n\t_grabbingController;\r\n\t_boundingBox;\r\n\t_bboxHelper;\r\n\r\n\t_targetState;\r\n\t_scene;\r\n\r\n\tconstructor(targetObject, scene, options) {\r\n\t\tsuper();\r\n\t\tthis._scene = scene;\r\n\r\n\t\tthis._options = Object.assign({}, defaultOptions, options);\r\n\t\tthis._controllersManager = ControllersManager.instance;\r\n\t\tthis._targetObject = targetObject;\r\n\r\n\t\t// check whether targetObject is a THREE.Object3D or  a descendant of THREE.Object3D\r\n\t\tif (!(targetObject instanceof THREE.Object3D)) {\r\n\t\t\tthrow new Error('GrabbableVrObject: targetObject must be an instance of THREE.Object3D');\r\n\t\t}\r\n\r\n\t\t// Setup event listeners for squeezeStart y squeezeEnd\r\n\r\n\t\tif (this._options.contactGrabbing.enabled || this._options.remoteGrabbing.enabled) {\r\n\t\t\tthis._controllersManager.addEventListener(CMEvents.ON_SQUEEZE_START, this._onSqueezeStart.bind(this));\r\n\t\t\tthis._controllersManager.addEventListener(CMEvents.ON_SQUEEZE_END, this._onSqueezeEnd.bind(this));\r\n\t\t\tthis._controllersManager.addEventListener(CMEvents.ON_UPDATE, this._onUpdate.bind(this));\r\n\t\t}\r\n\t}\r\n\r\n\t_onUpdate(e) {\r\n\t\tif (!this._grabbingController) return;\r\n\t\tif (this._targetState == 'flyToGrip') {\r\n\t\t\tlet grip = this._grabbingController.getGrip();\r\n\t\t\tlet gripPos = grip.getWorldPosition(new THREE.Vector3());\r\n\t\t\tlet pos = this._targetObject.position;\r\n\r\n\t\t\tlet incrementVector = new THREE.Vector3();\r\n\t\t\tincrementVector.subVectors(gripPos, pos);\r\n\t\t\tincrementVector.multiplyScalar(0.5);\r\n\t\t\tthis._targetObject.position.add(incrementVector);\r\n\r\n\t\t\te.time;\r\n\t\t\te.delta;\r\n\r\n\t\t\t// check distance to grip\r\n\t\t\tlet distanceToGrip = this._targetObject.position.distanceTo(gripPos);\r\n\t\t\tif (distanceToGrip < 0.15) {\r\n\t\t\t\tthis._grabbingController.attachObject(this._targetObject);\r\n\t\t\t\tthis._targetState = 'grabbed';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_getControllerDistanceToBBox(which) {\r\n\t\tlet controller = this._controllersManager.getController(which);\r\n\t\tif (!controller) return null;\r\n\r\n\t\tlet grip = controller.getGrip();\r\n\r\n\t\tthis._targetObject.updateMatrixWorld();\r\n\r\n\t\tthis._boundingBox = new THREE.Box3().setFromObject(this._targetObject, true);\r\n\t\tlet gripWorldPos = grip.getWorldPosition(new THREE.Vector3());\r\n\r\n\t\t// calculate distance bbox edges, localPoint should be in parent coordinates\r\n\t\tlet distance = this._boundingBox.distanceToPoint(gripWorldPos);\r\n\t\treturn distance;\r\n\t}\r\n\r\n\tget distanceToRightController() {\r\n\t\treturn this._getControllerDistanceToBBox('right');\r\n\t}\r\n\r\n\t_onSqueezeStart = (e) => {\r\n\t\t// The object is already grabbed by another controller\r\n\t\tif (this._grabbingController) return;\r\n\r\n\t\te.handedness; // right or left\r\n\t\te.ray; // ray going from the controller\r\n\r\n\t\t// measure distance from ray.origin to the target object\r\n\t\t// if distance is less than threshold, grab the object\r\n\r\n\t\tif (this._options.contactGrabbing.enabled) {\r\n\t\t\tlet controller = this._controllersManager.getController(e.handedness);\r\n\t\t\tlet grip = controller.getGrip();\r\n\t\t\tthis._targetObject.updateMatrixWorld();\r\n\t\t\tthis._boundingBox = new THREE.Box3().setFromObject(this._targetObject, true);\r\n\t\t\tlet gripWorldPos = grip.getWorldPosition(new THREE.Vector3());\r\n\r\n\t\t\tlet distance = this._boundingBox.distanceToPoint(gripWorldPos);\r\n\r\n\t\t\tif (distance < this._options.contactGrabbing.distanceThreshold) {\r\n\t\t\t\tthis._grabbingController = controller;\r\n\t\t\t\tthis._grabbingController.attachObject(this._targetObject);\r\n\t\t\t\tthis.dispatchEvent({\r\n\t\t\t\t\ttype: EventTypes.ON_GRAB_START,\r\n\t\t\t\t\tcontroller: this._grabbingController,\r\n\t\t\t\t\tobject: this._targetObject,\r\n\t\t\t\t});\r\n\t\t\t\treturn false; // stops event propagation\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._options.remoteGrabbing.enabled) {\r\n\t\t\tlet controller = this._controllersManager.getController(e.handedness);\r\n\t\t\t//let grip = controller.getGrip();\r\n\t\t\tthis._targetObject.updateMatrixWorld();\r\n\t\t\tthis._boundingBox = new THREE.Box3().setFromObject(this._targetObject, true);\r\n\t\t\tlet res = e.ray.intersectBox(this._boundingBox, new THREE.Vector3());\r\n\t\t\tif (res) {\r\n\t\t\t\tthis._grabbingController = controller;\r\n\r\n\t\t\t\tlet parent = this._targetObject.parent;\r\n\t\t\t\t// get transforms of _targetObject in world coordinates\r\n\t\t\t\tlet worldPos = this._targetObject.getWorldPosition(new THREE.Vector3());\r\n\t\t\t\tlet worldQuat = this._targetObject.getWorldQuaternion(new THREE.Quaternion());\r\n\t\t\t\tlet worldScale = this._targetObject.getWorldScale(new THREE.Vector3());\r\n\r\n\t\t\t\tparent.remove(this._targetObject);\r\n\t\t\t\tthis._scene.add(this._targetObject);\r\n\t\t\t\tthis._targetObject.position.copy(worldPos);\r\n\t\t\t\tthis._targetObject.quaternion.copy(worldQuat);\r\n\t\t\t\tthis._targetObject.scale.copy(worldScale);\r\n\r\n\t\t\t\tthis._targetState = 'flyToGrip';\r\n\t\t\t\tthis.dispatchEvent({\r\n\t\t\t\t\ttype: EventTypes.ON_GRAB_START,\r\n\t\t\t\t\tcontroller: this._grabbingController,\r\n\t\t\t\t\tobject: this._targetObject,\r\n\t\t\t\t});\r\n\t\t\t\treturn false; // stops event propagation\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t_onSqueezeEnd = (e) => {\r\n\t\tif (this._grabbingController) {\r\n\t\t\tthis._grabbingController.detachObject();\r\n\t\t\tthis.dispatchEvent({\r\n\t\t\t\ttype: EventTypes.ON_GRAB_END,\r\n\t\t\t\tcontroller: this._grabbingController,\r\n\t\t\t\tobject: this._targetObject,\r\n\t\t\t});\r\n\t\t\tthis._grabbingController = null;\r\n\t\t}\r\n\t};\r\n}\r\n","/*\r\n\r\nThis document explains the portion of the WebXR APIs for managing input across the range of XR hardware\r\nhttps://immersive-web.github.io/webxr/input-explainer\r\n\r\n*/\r\n\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n\r\nimport { VRButton } from 'three/addons/webxr/VRButton.js';\r\nimport { ControllersManager, EventTypes as CMEventTypes } from '../xr/ControllersManager.js';\r\nimport { XRTeleportMoveControl } from '../xr/XRTeleportMoveControl.js';\r\nimport { HtmlVrMenu } from '../xr/HtmlVrMenu.js';\r\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js';\r\nimport { createVRBasicScene } from './sharedModules/vrBasicTestScene';\r\nimport { HTMLMesh } from 'three/addons/interactive/HTMLMesh.js';\r\nimport { VrConsole } from '../xr/VrConsole.js';\r\nimport { VrVarsWatcher } from '../xr/VrVarsWatcher.js';\r\nimport { TeapotGeometry } from 'three/addons/geometries/TeapotGeometry.js';\r\nimport { GrabbableVrObject, defaultOptions as GrDefaultOptions } from './../xr/GrabbableVrObject';\r\n\r\nlet renderer;\r\nlet scene;\r\nlet camera;\r\n\r\nlet clock = new THREE.Clock();\r\n\r\nlet controllersManager;\r\nlet xrTeleportMoveControl;\r\nlet sceneElements;\r\n\r\nlet vrConsole;\r\nlet vrVarsWatcher;\r\nlet time = 0;\r\nlet teapot;\r\nlet teapotBBoxHelper;\r\n\r\nlet grababbles = [];\r\nlet table;\r\n\r\nconst colors = [\r\n\t0xff0000, 0x00ff00, 0x0000ff, 0xffff00, 0xff00ff, 0x00ffff, 0x999999, 0x666666, 0xcccccc, 0xff9999, 0x99ff99,\r\n\t0x9999ff, 0xffff99, 0xff99ff, 0x99ffff, 0x000000,\r\n];\r\n\r\nfunction setupThreejs() {\r\n\t// Make a renderer that fills the screen\r\n\trenderer = new THREE.WebGLRenderer({ antialias: true });\r\n\trenderer.setPixelRatio(window.devicePixelRatio);\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n\trenderer.xr.addEventListener('sessionstart', function (event) {});\r\n\r\n\trenderer.xr.addEventListener('sessionend', function (event) {\r\n\t\tonWindowResize();\r\n\t});\r\n\trenderer.xr.enabled = true;\r\n\r\n\tdocument.body.appendChild(renderer.domElement);\r\n\tdocument.body.appendChild(VRButton.createButton(renderer));\r\n\r\n\tscene = new THREE.Scene();\r\n\r\n\tcamera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 10000);\r\n\tcamera.position.set(0, 3, 5);\r\n\r\n\tscene.add(camera);\r\n\r\n\tconst controls = new OrbitControls(camera, renderer.domElement);\r\n\tcontrols.target.set(0, 1, 0);\r\n\tcontrols.update();\r\n\r\n\t// Handle browser resize\r\n\twindow.addEventListener('resize', onWindowResize, false);\r\n}\r\n\r\nfunction setupXR() {\r\n\tcontrollersManager = new ControllersManager(renderer.xr, scene);\r\n\txrTeleportMoveControl = new XRTeleportMoveControl(renderer.xr, controllersManager, scene);\r\n}\r\n\r\nfunction onWindowResize() {\r\n\tcamera.aspect = window.innerWidth / window.innerHeight;\r\n\tcamera.updateProjectionMatrix();\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n}\r\n\r\nfunction buildScene() {\r\n\tsceneElements = createVRBasicScene(scene);\r\n\r\n\tlet vrConsole = new VrConsole(document.body, scene, controllersManager, { debugLevel: 1, size: 4 });\r\n\tvrConsole.createMap();\r\n\tlet vrConsoleMesh = vrConsole.mesh;\r\n\tvrConsoleMesh.position.set(4, 1, -3);\r\n\tvrConsoleMesh.rotation.y = -Math.PI / 4;\r\n\t//scene.add(vrConsoleMesh);\r\n\r\n\tvrVarsWatcher = new VrVarsWatcher(scene, controllersManager, { size: 2 });\r\n\r\n\tlet watcherMesh = vrVarsWatcher.mesh;\r\n\twatcherMesh.position.set(0, 1, -5);\r\n\t//scene.add(watcherMesh);\r\n\tvrVarsWatcher.createMap();\r\n\r\n\txrTeleportMoveControl.setTeleportSurfaces(sceneElements.floor.geometry);\r\n\tcreateGrabbableObjects();\r\n}\r\n\r\n// create grabbable objects\r\n\r\nfunction createGrabbableObjects() {\r\n\t// teapot\r\n\tlet colorNumber = 0;\r\n\tconst teapotGeometry = new TeapotGeometry(0.2);\r\n\tteapotGeometry.translate(0, 0.25, 0);\r\n\tconst teapotMaterial = new THREE.MeshPhongMaterial({ color: 0x000000, opacity: 1 });\r\n\tlet teapot = new THREE.Mesh(teapotGeometry, teapotMaterial);\r\n\r\n\t// cilinder table\r\n\tconst tableGeometry = new THREE.CylinderGeometry(1.5, 1.5, 0.1, 32);\r\n\tconst tableMaterial = new THREE.MeshPhongMaterial({ color: 0xcccccc });\r\n\ttable = new THREE.Mesh(tableGeometry, tableMaterial);\r\n\ttable.position.set(-2, 0.75, -2);\r\n\tscene.add(table);\r\n\tlet teapotNumber = 0;\r\n\r\n\tfor (let a = 0; a < Math.PI * 2; a = a + Math.PI / 4) {\r\n\t\tlet t = teapot.clone();\r\n\t\tt.material = teapot.material.clone();\r\n\t\tt.material.color.setHex(colors[Math.floor(Math.random() * colors.length)]);\r\n\t\tt.name = 'teapot' + teapotNumber;\r\n\t\tt.position.set(Math.cos(a), 0, Math.sin(a));\r\n\t\tt.rotateY(a);\r\n\t\ttable.add(t);\r\n\t\tconst options = Object.assign({}, GrDefaultOptions, { remoteGrabbing: { enabled: false } });\r\n\t\tlet grabController = new GrabbableVrObject(t, scene, options);\r\n\t\tgrabController.addEventListener('onGrabStart', onGrabStart);\r\n\t\tgrabController.addEventListener('onGrabEnd', onGrabEnd);\r\n\t\tgrababbles.push(t);\r\n\t\tteapotNumber++;\r\n\t}\r\n\r\n\tfor (let x = 0; x < 4; x++) {\r\n\t\tfor (let z = 0; z < 4; z++) {\r\n\t\t\tlet t = teapot.clone();\r\n\t\t\tt.material = teapot.material.clone();\r\n\t\t\tt.material.color.setHex(colors[Math.floor(Math.random() * colors.length)]);\r\n\t\t\tt.name = 'teapot' + teapotNumber;\r\n\t\t\tt.position.set(3 + x, 0, -2 - z);\r\n\t\t\tlet s = 0.5 + Math.random() * 0.5;\r\n\t\t\tt.scale.set(s, s, s);\r\n\t\t\tt.rotation.y = Math.PI * 2 * Math.random();\r\n\t\t\tscene.add(t);\r\n\r\n\t\t\tlet grabController = new GrabbableVrObject(t, scene);\r\n\t\t\tgrabController.addEventListener('onGrabStart', onGrabStart);\r\n\t\t\tgrabController.addEventListener('onGrabEnd', onGrabEnd);\r\n\t\t\tgrababbles.push(t);\r\n\t\t\tteapotNumber++;\r\n\t\t}\r\n\t}\r\n\t/*\r\n\t\r\n\r\n\tteapot.position.set(0, 0.5, -0.5);\r\n\tteapot.rotation.z = Math.PI / 4;\r\n\r\n\t// teapotGroup\r\n\tconst teapotGroup = new THREE.Group();\r\n\tteapotGroup.position.set(0, 1, 0);\r\n\tteapotGroup.rotation.x = Math.PI / 8;\r\n\tteapotGroup.add(teapot);\r\n\t// axes helper\r\n\tteapotGroup.add(new THREE.AxesHelper(0.5));\r\n\tscene.add(teapotGroup);\r\n\r\n\tlet teapotGrabControl = new GrabbableVrObject(teapot, controllersManager);\r\n\tteapotGrabControl.addEventListener('onGrabStart', function (e) {\r\n\t\t//console.log('Teapot grabbed');\r\n\t\tteapot.material.color.set(0xff0000);\r\n\t});\r\n\tteapotGrabControl.addEventListener('onGrabEnd', function (e) {\r\n\t\t//console.log('Teapot released');\r\n\t\tteapot.material.color.set(0x00ff00);\r\n\t});\r\n\r\n\tteapot.parent.updateMatrixWorld();\r\n\tvrVarsWatcher.add('distance', () => teapotGrabControl.distanceToRightController);\r\n\r\n\tconst ref5 = vrVarsWatcher.add('Distance', () => getRightControllerPos());\r\n\t*/\r\n}\r\n\r\nfunction onGrabStart(e) {\r\n\te.object.material.emissive.setHex(0x999999);\r\n}\r\n\r\nfunction onGrabEnd(e) {\r\n\te.object.material.emissive.setHex(0x000000);\r\n}\r\n\r\nfunction getRightControllerPos() {\r\n\treturn controllersManager?.right?.controller?.getWorldPosition(new THREE.Vector3());\r\n}\r\n\r\nfunction animate() {\r\n\trenderer.setAnimationLoop(render);\r\n}\r\n\r\nfunction render(time) {\r\n\tconst delta = clock.getDelta();\r\n\tcontrollersManager.update(time, delta);\r\n\txrTeleportMoveControl.update(delta);\r\n\tvrVarsWatcher.update(time, delta);\r\n\t//buildTestBox(time);\r\n\trenderer.render(scene, camera);\r\n\tif (teapotBBoxHelper) {\r\n\t\tscene.remove(teapotBBoxHelper);\r\n\t}\r\n\t//const bbox = new THREE.Box3().setFromObject(teapot, true);\r\n\t//teapotBBoxHelper = new THREE.Box3Helper(bbox, 0xffff00);\r\n\t//scene.add(teapotBBoxHelper);\r\n\ttable.rotation.y += delta;\r\n\ttime += delta;\r\n}\r\n\r\nfunction buildTestBox(time) {\r\n\tif (boxGroup) {\r\n\t\tscene.remove(boxGroup);\r\n\t\tscene.remove(helper);\r\n\t}\r\n\tconst geometry = new THREE.BoxGeometry(0.1, 0.3, 0.2);\r\n\tconst mat = new THREE.MeshBasicMaterial({ color: 0x00ffff, transparent: true, opacity: 0.5 });\r\n\tconst box = new THREE.Mesh(geometry, mat);\r\n\r\n\tbox.position.set(0, 0.2, 0);\r\n\t//box.rotation.set(0.2, 0, 0.3);\r\n\r\n\t// group\r\n\tboxGroup = new THREE.Group();\r\n\tboxGroup.position.set(-1, 1, 0);\r\n\tboxGroup.rotation.set(0, 1, time / 1000);\r\n\r\n\t//boxGroup.rotation.x = Math.PI / 8;\r\n\tboxGroup.add(box);\r\n\t// axes helper\r\n\tboxGroup.add(new THREE.AxesHelper(0.5));\r\n\tscene.add(boxGroup);\r\n\r\n\tbox.updateMatrixWorld();\r\n\tboxGroup.updateMatrixWorld();\r\n\r\n\tconst bbox = new THREE.Box3();\r\n\tbbox.setFromObject(box, true);\r\n\r\n\t//console.log(bbox.min);\r\n\t//console.log(bbox.max);\r\n\r\n\thelper = new THREE.Box3Helper(bbox, 0xffff00);\r\n\tscene.add(helper);\r\n}\r\n\r\nsetupThreejs();\r\nsetupXR();\r\nbuildScene();\r\n\r\nanimate();\r\n"],"names":["defaultOptions","EventTypes","GrabbableVrObject","EventsDispatcher","targetObject","scene","options","__publicField","e","controller","grip","THREE.Box3","gripWorldPos","THREE.Vector3","parent","worldPos","worldQuat","THREE.Quaternion","worldScale","ControllersManager","THREE.Object3D","CMEvents","gripPos","pos","incrementVector","which","renderer","camera","clock","THREE.Clock","controllersManager","xrTeleportMoveControl","sceneElements","vrVarsWatcher","table","colors","setupThreejs","THREE.WebGLRenderer","event","onWindowResize","VRButton","THREE.Scene","THREE.PerspectiveCamera","controls","OrbitControls","setupXR","XRTeleportMoveControl","buildScene","createVRBasicScene","vrConsole","VrConsole","vrConsoleMesh","VrVarsWatcher","createGrabbableObjects","teapotGeometry","TeapotGeometry","teapotMaterial","THREE.MeshPhongMaterial","teapot","THREE.Mesh","tableGeometry","THREE.CylinderGeometry","tableMaterial","teapotNumber","a","t","GrDefaultOptions","grabController","onGrabStart","onGrabEnd","x","z","s","animate","render","time","delta"],"mappings":"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"}