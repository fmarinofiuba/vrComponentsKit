{"version":3,"file":"selectableObjectsExample.js","sources":["../src/xr/SelectableVrObject.js","../src/kit/selectableObjectsExample.js"],"sourcesContent":["/**\r\n * GrabbableVrObject\r\n *\r\n * This class provides functionality to make objects grabbable in VR environments.\r\n * It supports both contact grabbing (when controller is close to the object) and\r\n * remote grabbing (ray-based interaction). The class handles controller interactions,\r\n * object attachment/detachment, and provides events for grab start/end actions.\r\n */\r\nimport * as THREE from 'three';\r\nimport { EventsDispatcher } from '../utils/EventsDispatcher.js';\r\nimport { ControllersManager, EventTypes as CMEvents } from './ControllersManager.js';\r\n\r\nexport const defaultOptions = {\r\n\tshowHelpers: true,\r\n};\r\n\r\nexport const EventTypes = {\r\n\tON_RAY_OVER: 'onRayOver', // the ray is over the object's bounding box\r\n\tON_RAY_OUT: 'onRayOut', // the ray is out of the object's bounding box\r\n\tON_SELECTED: 'onSelected', // the object is selected (clicked)\r\n};\r\n\r\nconst selectablesList = [];\r\nconst controllerRayOverObject = {\r\n\tleft: null,\r\n\tright: null,\r\n};\r\n\r\nexport class SelectableVrObject extends EventsDispatcher {\r\n\t_options;\r\n\t_controllersManager;\r\n\r\n\t_targetObject;\r\n\t_boundingBox;\r\n\t_bboxHelper;\r\n\r\n\t_scene;\r\n\r\n\tconstructor(targetObject, scene, options) {\r\n\t\tsuper();\r\n\t\tthis._scene = scene;\r\n\r\n\t\tthis._options = Object.assign({}, defaultOptions, options);\r\n\t\tthis._controllersManager = ControllersManager.instance;\r\n\t\tthis._targetObject = targetObject;\r\n\r\n\t\t// check whether targetObject is a THREE.Object3D or  a descendant of THREE.Object3D\r\n\t\tif (!(targetObject instanceof THREE.Object3D)) {\r\n\t\t\tthrow new Error('SelectableVrObject: targetObject must be an instance of THREE.Object3D');\r\n\t\t}\r\n\r\n\t\t// Setup event listeners for squeezeStart y squeezeEnd\r\n\r\n\t\tthis._controllersManager.addEventListener(CMEvents.ON_RAY_STARTED, this._onRayStarted.bind(this));\r\n\t\t//this._controllersManager.addEventListener(CMEvents.ON_RAY_ENDED, this._onRayEnded.bind(this));\r\n\t\t//this._controllersManager.addEventListener(CMEvents.ON_UPDATE, this._onUpdate.bind(this));\r\n\r\n\t\tselectablesList.push(this);\r\n\t}\r\n\r\n\tget targetObject() {\r\n\t\treturn this._targetObject;\r\n\t}\r\n\r\n\tstatic testRays = function (controllersManager) {\r\n\t\tconst nearestObject = {\r\n\t\t\tleft: {\r\n\t\t\t\tobject: null,\r\n\t\t\t\tdistance: Infinity,\r\n\t\t\t},\r\n\t\t\tright: {\r\n\t\t\t\tobject: null,\r\n\t\t\t\tdistance: Infinity,\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\t// iterate over all selectable objects and test they are in the line of sight of the controller ray\r\n\r\n\t\t['left', 'right'].forEach((hand) => {\r\n\t\t\tconst currentObjectOverRay = controllerRayOverObject[hand];\r\n\t\t\tconst nearest = nearestObject[hand];\r\n\t\t\tlet hc = controllersManager.getController(hand);\r\n\t\t\tif (hc) {\r\n\t\t\t\tselectablesList.forEach((selectable) => {\r\n\t\t\t\t\tlet ray = hc.ray;\r\n\t\t\t\t\tlet distance = selectable.testRayBBoxIntersection(ray);\r\n\r\n\t\t\t\t\tif (distance != null && distance < nearest.distance) {\r\n\t\t\t\t\t\tnearest.object = selectable;\r\n\t\t\t\t\t\tnearest.distance = distance;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (currentObjectOverRay && currentObjectOverRay != nearest.object) {\r\n\t\t\t\t\t// The current object over the ray is different from the nearest object\r\n\t\t\t\t\t// So, we dispatch an event to the object that is being over by ray.\r\n\t\t\t\t\tcurrentObjectOverRay.dispatchEvent({\r\n\t\t\t\t\t\ttype: EventTypes.ON_RAY_OUT,\r\n\t\t\t\t\t\tcontroller: hc,\r\n\t\t\t\t\t\thand: hand,\r\n\t\t\t\t\t\tobject: currentObjectOverRay.targetObject,\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// set the current object over ray to null\r\n\t\t\t\t\tcontrollerRayOverObject[hand] = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if the nearest is not the current one, then we dispatch an event and update the current object over ray\r\n\t\t\t\tif (nearest.object && currentObjectOverRay != nearest.object) {\r\n\t\t\t\t\tnearest.object.dispatchEvent({\r\n\t\t\t\t\t\ttype: EventTypes.ON_RAY_OVER,\r\n\t\t\t\t\t\tcontroller: hc,\r\n\t\t\t\t\t\thand: hand,\r\n\t\t\t\t\t\tobject: nearest.object.targetObject,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tcontrollerRayOverObject[hand] = nearest.object;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t_onRayStarted = (e) => {\r\n\t\te.handedness; // right or left\r\n\t\te.ray; // ray going from the controller\r\n\r\n\t\tlet controller = this._controllersManager.getController(e.handedness);\r\n\r\n\t\tif (this.testRayBBoxIntersection(e.ray)) {\r\n\t\t\tthis.dispatchEvent({\r\n\t\t\t\ttype: EventTypes.ON_SELECTED,\r\n\t\t\t\tcontroller: controller,\r\n\t\t\t\tobject: this._targetObject,\r\n\t\t\t});\r\n\t\t\treturn false; // stops event propagation\r\n\t\t}\r\n\t};\r\n\r\n\ttestRayBBoxIntersection(ray) {\r\n\t\tthis._targetObject.updateMatrixWorld();\r\n\t\tthis._boundingBox = new THREE.Box3().setFromObject(this._targetObject, true);\r\n\t\tlet res = ray.intersectBox(this._boundingBox, new THREE.Vector3());\r\n\r\n\t\treturn res ? res.distanceTo(ray.origin) : null;\r\n\t}\r\n}\r\n","/*\r\n\r\nThis document explains the portion of the WebXR APIs for managing input across the range of XR hardware\r\nhttps://immersive-web.github.io/webxr/input-explainer\r\n\r\n*/\r\n\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n\r\nimport { VRButton } from 'three/addons/webxr/VRButton.js';\r\nimport { ControllersManager, EventTypes as CMEventTypes } from '../xr/ControllersManager.js';\r\nimport { XRTeleportMoveControl } from '../xr/XRTeleportMoveControl.js';\r\nimport { HtmlVrMenu } from '../xr/HtmlVrMenu.js';\r\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js';\r\nimport { createVRBasicScene } from './sharedModules/vrBasicTestScene';\r\nimport { HTMLMesh } from 'three/addons/interactive/HTMLMesh.js';\r\nimport { VrConsole } from '../xr/VrConsole.js';\r\nimport { VrVarsWatcher } from '../xr/VrVarsWatcher.js';\r\nimport { TeapotGeometry } from 'three/addons/geometries/TeapotGeometry.js';\r\nimport { SelectableVrObject, defaultOptions as SlDefaultOptions } from './../xr/SelectableVrObject';\r\n\r\nlet renderer;\r\nlet scene;\r\nlet camera;\r\n\r\nlet clock = new THREE.Clock();\r\n\r\nlet controllersManager;\r\nlet xrTeleportMoveControl;\r\nlet sceneElements;\r\n\r\nlet vrConsole;\r\nlet vrVarsWatcher;\r\nlet time = 0;\r\nlet teapot;\r\nlet teapotBBoxHelper;\r\n\r\nlet geometries = [];\r\nlet materials = [];\r\nlet selectables = [];\r\nlet table;\r\n\r\nlet currentMaterialIndex = 0;\r\nlet currentGeometryIndex = 0;\r\n\r\nlet podiumObject = null;\r\nconst selectors = [];\r\n\r\nfunction setupThreejs() {\r\n\t// Make a renderer that fills the screen\r\n\trenderer = new THREE.WebGLRenderer({ antialias: true });\r\n\trenderer.setPixelRatio(window.devicePixelRatio);\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n\trenderer.xr.addEventListener('sessionstart', function (event) {});\r\n\r\n\trenderer.xr.addEventListener('sessionend', function (event) {\r\n\t\tonWindowResize();\r\n\t});\r\n\trenderer.xr.enabled = true;\r\n\r\n\tdocument.body.appendChild(renderer.domElement);\r\n\tdocument.body.appendChild(VRButton.createButton(renderer));\r\n\r\n\tscene = new THREE.Scene();\r\n\r\n\tcamera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 10000);\r\n\tcamera.position.set(0, 3, 5);\r\n\r\n\tscene.add(camera);\r\n\r\n\tconst controls = new OrbitControls(camera, renderer.domElement);\r\n\tcontrols.target.set(0, 1, 0);\r\n\tcontrols.update();\r\n\r\n\t// Handle browser resize\r\n\twindow.addEventListener('resize', onWindowResize, false);\r\n}\r\n\r\nfunction setupXR() {\r\n\tcontrollersManager = new ControllersManager(renderer.xr, scene);\r\n\txrTeleportMoveControl = new XRTeleportMoveControl(renderer.xr, controllersManager, scene);\r\n}\r\n\r\nfunction onWindowResize() {\r\n\tcamera.aspect = window.innerWidth / window.innerHeight;\r\n\tcamera.updateProjectionMatrix();\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n}\r\n\r\nfunction createGeometriesAndMaterials() {\r\n\t// geometries\r\n\r\n\tlet geo = new THREE.BoxGeometry(0.5, 0.5, 0.5);\r\n\tgeometries.push(geo);\r\n\r\n\t//a sphere\r\n\tgeo = new THREE.SphereGeometry(0.4, 32, 32);\r\n\tgeometries.push(geo);\r\n\r\n\t//a torus\r\n\tgeo = new THREE.TorusGeometry(0.35, 0.05, 48, 32);\r\n\tgeometries.push(geo);\r\n\r\n\t// a cylinder\r\n\tgeo = new THREE.CylinderGeometry(0, 0.5, 0.7);\r\n\tgeometries.push(geo);\r\n\r\n\t// a torus knot\r\n\tgeo = new THREE.TorusKnotGeometry(0.2, 0.071, 64, 32);\r\n\tgeometries.push(geo);\r\n\r\n\t//materials\r\n\r\n\t// glossy shinny red\r\n\tlet mat = new THREE.MeshStandardMaterial({ color: 0xff0000, metalness: 0.5, roughness: 0.1 });\r\n\tmaterials.push(mat);\r\n\r\n\t// blue plastic\r\n\tmat = new THREE.MeshStandardMaterial({ color: 0x0000ff, metalness: 0.1, roughness: 0.5 });\r\n\tmaterials.push(mat);\r\n\r\n\t// transparent green shinny glass\r\n\tmat = new THREE.MeshStandardMaterial({\r\n\t\tcolor: 0x00ff00,\r\n\t\tmetalness: 0.5,\r\n\t\troughness: 0.1,\r\n\t\ttransparent: true,\r\n\t\topacity: 0.5,\r\n\t});\r\n\tmaterials.push(mat);\r\n\r\n\t// silver metal\r\n\tmat = new THREE.MeshStandardMaterial({ color: 0x808080, metalness: 0.5, roughness: 0.3 });\r\n\tmaterials.push(mat);\r\n\r\n\t// rough yellow plastic\r\n\tmat = new THREE.MeshStandardMaterial({ color: 0xffff00, metalness: 0.5, roughness: 0.9 });\r\n\tmaterials.push(mat);\r\n}\r\n\r\nfunction buildScene() {\r\n\tsceneElements = createVRBasicScene(scene);\r\n\r\n\t// box\r\n\tlet geo = new THREE.BoxGeometry(1, 1, 1);\r\n\tlet mat = new THREE.MeshBasicMaterial({ color: 0xffff00, wireframe: true });\r\n\tlet cube = new THREE.Mesh(geo, mat);\r\n\r\n\tlet c = cube.clone();\r\n\tscene.add(c);\r\n\tc.visible = false;\r\n\tselectors.push(c);\r\n\r\n\tc = cube.clone();\r\n\tscene.add(c);\r\n\tc.visible = false;\r\n\tselectors.push(c);\r\n\r\n\txrTeleportMoveControl.setTeleportSurfaces(sceneElements.floor.geometry);\r\n\tcreateSelectableObjects();\r\n}\r\n\r\n// create grabbable objects\r\n\r\nfunction createSelectableObjects() {\r\n\t// plane\r\n\tconst planeGeometry = new THREE.PlaneGeometry(8, 5);\r\n\r\n\tconst planeMaterial = new THREE.MeshPhongMaterial({ color: 'white', side: THREE.DoubleSide });\r\n\tconst plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n\tplane.position.set(0, 2, -4);\r\n\tscene.add(plane);\r\n\r\n\t// cilinder table\r\n\tconst tableGeometry = new THREE.CylinderGeometry(0.5, 0.5, 0.2, 32);\r\n\ttableGeometry.translate(0, 0.1, 0);\r\n\tconst tableMaterial = new THREE.MeshPhongMaterial({ color: 0xcccccc });\r\n\ttable = new THREE.Mesh(tableGeometry, tableMaterial);\r\n\ttable.position.set(0, 0.0, -2);\r\n\tscene.add(table);\r\n\r\n\t// grey material\r\n\tconst greyMat = new THREE.MeshPhongMaterial({ color: 0x999999 });\r\n\tlet geometriesGroup = new THREE.Group();\r\n\r\n\tfor (let i = 0; i < geometries.length; i++) {\r\n\t\tlet mesh = new THREE.Mesh(geometries[i], greyMat.clone());\r\n\t\tmesh.name = 'geometry' + i;\r\n\t\tmesh.userData.geometryIndex = i;\r\n\t\tmesh.position.set(i - (geometries.length - 1) / 2, 0, 0);\r\n\t\tgeometriesGroup.add(mesh);\r\n\r\n\t\tlet selectionController = new SelectableVrObject(mesh, scene);\r\n\t\tselectionController.addEventListener('onRayOver', onRayOver);\r\n\t\tselectionController.addEventListener('onRayOut', onRayOut);\r\n\t\tselectionController.addEventListener('onSelected', onSelected);\r\n\t}\r\n\r\n\t//geometriesGroup.rotation.y = Math.PI / 2;\r\n\tgeometriesGroup.position.set(0, 2, -3);\r\n\tscene.add(geometriesGroup);\r\n\r\n\tconst SphereGeometry = new THREE.SphereGeometry(0.4, 32, 32);\r\n\tconst materialsGroup = new THREE.Group();\r\n\r\n\tfor (let i = 0; i < materials.length; i++) {\r\n\t\tlet mesh = new THREE.Mesh(SphereGeometry, materials[i]);\r\n\t\tmesh.name = 'material' + i;\r\n\t\tmesh.userData.materialIndex = i;\r\n\t\tmesh.position.set(i - (geometries.length - 1) / 2, 0, 0);\r\n\t\tmaterialsGroup.add(mesh);\r\n\r\n\t\tlet selectionController = new SelectableVrObject(mesh, scene);\r\n\r\n\t\tselectionController.addEventListener('onRayOver', onRayOver);\r\n\t\tselectionController.addEventListener('onRayOut', onRayOut);\r\n\t\tselectionController.addEventListener('onSelected', onSelected);\r\n\t}\r\n\r\n\tmaterialsGroup.position.set(0, 3, -3);\r\n\tscene.add(materialsGroup);\r\n}\r\n\r\nfunction onRayOver(e) {\r\n\tconsole.log('onRayOver', e);\r\n\te.object.material.emissive.setHex(0x999999);\r\n}\r\n\r\nfunction onRayOut(e) {\r\n\tconsole.log('onRayOut', e);\r\n\te.object.material.emissive.setHex(0x000000);\r\n}\r\n\r\nfunction onSelected(e) {\r\n\t//e.object.material.emissive.setHex(0x000000);\r\n\tconsole.log('onSelected userData', e.object.userData);\r\n\tlet udata = e.object.userData;\r\n\r\n\tif (udata.hasOwnProperty('geometryIndex')) {\r\n\t\tcurrentGeometryIndex = udata.geometryIndex;\r\n\t\tselectors[0].position.copy(e.object.localToWorld(new THREE.Vector3(0, 0, 0)));\r\n\t\tselectors[0].visible = true;\r\n\t}\r\n\tif (udata.hasOwnProperty('materialIndex')) {\r\n\t\tcurrentMaterialIndex = udata.materialIndex;\r\n\t\tselectors[1].position.copy(e.object.localToWorld(new THREE.Vector3(0, 0, 0)));\r\n\t\tselectors[1].visible = true;\r\n\t}\r\n\r\n\tupdatePodiumObject();\r\n}\r\n\r\nfunction updatePodiumObject() {\r\n\tif (podiumObject) scene.remove(podiumObject);\r\n\tpodiumObject = new THREE.Mesh(geometries[currentGeometryIndex], materials[currentMaterialIndex].clone());\r\n\tpodiumObject.position.set(0, 1, -2);\r\n\tpodiumObject.scale.set(2, 2, 2);\r\n\tscene.add(podiumObject);\r\n}\r\n\r\nfunction animate() {\r\n\trenderer.setAnimationLoop(render);\r\n}\r\n\r\nfunction render(time) {\r\n\tconst delta = clock.getDelta();\r\n\tcontrollersManager.update(time, delta);\r\n\txrTeleportMoveControl.update(delta);\r\n\tSelectableVrObject.testRays(controllersManager);\r\n\r\n\trenderer.render(scene, camera);\r\n\r\n\tif (podiumObject) podiumObject.rotation.y += delta;\r\n\ttime += delta;\r\n}\r\n\r\nsetupThreejs();\r\nsetupXR();\r\ncreateGeometriesAndMaterials();\r\nbuildScene();\r\nupdatePodiumObject();\r\n\r\nanimate();\r\n"],"names":["defaultOptions","EventTypes","selectablesList","controllerRayOverObject","SelectableVrObject","EventsDispatcher","targetObject","scene","options","__publicField","e","controller","ControllersManager","THREE.Object3D","CMEvents","ray","THREE.Box3","res","THREE.Vector3","controllersManager","nearestObject","hand","currentObjectOverRay","nearest","hc","selectable","distance","renderer","camera","clock","THREE.Clock","xrTeleportMoveControl","sceneElements","geometries","materials","table","currentMaterialIndex","currentGeometryIndex","podiumObject","selectors","setupThreejs","THREE.WebGLRenderer","event","onWindowResize","VRButton","THREE.Scene","THREE.PerspectiveCamera","controls","OrbitControls","setupXR","XRTeleportMoveControl","createGeometriesAndMaterials","geo","THREE.BoxGeometry","THREE.SphereGeometry","THREE.TorusGeometry","THREE.CylinderGeometry","THREE.TorusKnotGeometry","mat","THREE.MeshStandardMaterial","buildScene","createVRBasicScene","THREE.MeshBasicMaterial","cube","THREE.Mesh","c","createSelectableObjects","planeGeometry","THREE.PlaneGeometry","planeMaterial","THREE.MeshPhongMaterial","THREE.DoubleSide","plane","tableGeometry","tableMaterial","greyMat","geometriesGroup","THREE.Group","i","mesh","selectionController","onRayOver","onRayOut","onSelected","SphereGeometry","materialsGroup","udata","updatePodiumObject","animate","render","time","delta"],"mappings":"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"}